#  输入：arr = [66], d = 1
# 输出：1
#
#
#
#
#  提示：
#
#
#  1 <= arr.length <= 1000
#  1 <= arr[i] <= 10^5
#  1 <= d <= arr.length
#
#  Related Topics 动态规划
#  👍 54 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution(object):
    def maxJumps(self, arr, d):
        """
        :type arr: List[int]
        :type d: int
        :rtype: int
        """
        res = [(x, i) for i, x in enumerate(arr)]

        res.sort()
        # print res
        dp = [1 for _ in res]

        for k in range(len(arr)):
            i = res[k][1]
            for j in range(1, d + 1):
                if i + j == len(arr) or arr[i + j] >= arr[i]:
                    break
                dp[i] = max(dp[i], dp[i + j] + 1)

            for j in range(1, d + 1):
                if i - j < 0 or arr[i - j] >= arr[i]:
                    break
                dp[i] = max(dp[i], dp[i - j] + 1)
        return max(dp)

if __name__ == "__main__":
    r = Solution()
    rs = r.maxJumps(arr = [7,1,7,1,7,1], d = 2)
    print(rs)


# leetcode submit region end(Prohibit modification and deletion)
