# 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
#
#
#
#  说明：
#
#
#  初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
#  你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
#
#
#
#
#  示例：
#
#
# 输入：
# nums1 = [1,2,3,0,0,0], m = 3
# nums2 = [2,5,6],       n = 3
#
# 输出：[1,2,2,3,5,6]
#
#
#
#  提示：
#
#
#  -10^9 <= nums1[i], nums2[i] <= 10^9
#  nums1.length == m + n
#  nums2.length == n
#
#  Related Topics 数组 双指针
#  👍 718 👎 0


# leetcode submit region begin(Prohibit modification and deletion)

from typing import List

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        if m == 0:
            for i in range(n):
                nums1[i] = nums2[i]
        elif n == 0:
            pass
        else:
            nums1[-m:] = nums1[:m]
            first_ptr = n          #[n, n + m -1]
            second_ptr = 0         #[0, n - 1]
            ptr = 0
            while first_ptr < n+m and second_ptr < n:
                if nums1[first_ptr] < nums2[second_ptr]:
                    nums1[ptr] = nums1[first_ptr]
                    ptr += 1
                    first_ptr += 1
                elif nums1[first_ptr] >= nums2[second_ptr]:
                    nums1[ptr] = nums2[second_ptr]
                    ptr += 1
                    second_ptr += 1
            while first_ptr == n+m and second_ptr < n:
                nums1[ptr] = nums2[second_ptr]
                ptr += 1
                second_ptr += 1
            while first_ptr < n+m and second_ptr == n:
                nums1[ptr] = nums1[first_ptr]
                ptr+=1
                first_ptr += 1


if __name__ == "__main__":
    r = Solution()
    rs = r.merge(nums1=[1, 2, 3, 0 ,0 ,0 ], m=3, nums2=[2, 5, 6], n=3)
    print(rs)

# leetcode submit region end(Prohibit modification and deletion).       
