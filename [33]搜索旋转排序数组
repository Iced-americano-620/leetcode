# 升序排列的整数数组 nums 在预先未知的某个点上进行了旋转（例如， [0,1,2,4,5,6,7] 经旋转后可能变为 [4,5,6,7,0,1,2] ）。
#
#
#  请你在数组中搜索 target ，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
#
#
#
#  示例 1：
#
#
# 输入：nums = [4,5,6,7,0,1,2], target = 0
# 输出：4
#
#
#  示例 2：
#
#
# 输入：nums = [4,5,6,7,0,1,2], target = 3
# 输出：-1
#
#  示例 3：
#
#
# 输入：nums = [1], target = 0
# 输出：-1
#
#
#
#
#  提示：
#
#
#  1 <= nums.length <= 5000
#  -10^4 <= nums[i] <= 10^4
#  nums 中的每个值都 独一无二
#  nums 肯定会在某个点上旋转
#  -10^4 <= target <= 10^4
#
#  Related Topics 数组 二分查找
#  👍 1114 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def search(self, nums,target):
        # 数组元素个数为0和1的特殊情况
        if not nums:
            return -1
        if len(nums) == 1:
            if nums[0] == target:
                return 0
            else:
                return -1
        mid = -1
        # 先找出最小值索引
        l, r = 0, len(nums) - 1
        while l < r:
            mid = int((l + r) / 2)
            if nums[mid] > nums[mid + 1]:
                mid = mid + 1
                break
            if nums[mid] > nums[-1]:
                l = mid + 1
            elif nums[mid] <= nums[-1]:
                r = mid
        min_index = mid
        # 对第一个数组二分查找
        l1, r1 = 0, min_index
        while l1 < r1:
            mid1 = int((l1 + r1) / 2)
            if nums[mid1] == target:
                return mid1
            elif nums[mid1] < target:
                l1 = mid1 + 1
            else:
                r1 = mid1
        # 对第二个数组二分查找
        l2, r2 = min_index, len(nums)
        while l2 < r2:
            mid2 = int((l2 + r2) / 2)
            if nums[mid2] == target:
                return mid2
            elif nums[mid2] < target:
                l2 = mid2 + 1
            else:
                r2 = mid2
        return -1
if __name__ == '__main__':
    s = Solution()
    print(s.search(nums = [4,5,6,7,0,1,2], target = 3))

# leetcode submit region end(Prohibit modification and deletion)
